// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  bookings Booking[]
  reviews  Review[]
  
  // Technician specific fields
  technicianProfile TechnicianProfile?
  assignedBookings  Booking[] @relation("TechnicianBookings")
}

model TechnicianProfile {
  id           String        @id @default(cuid())
  userId       String        @unique
  specialties  ServiceType[]
  experience   Int           // years of experience
  rating       Float         @default(0)
  totalReviews Int           @default(0)
  isAvailable  Boolean       @default(true)
  hourlyRate   Float?
  bio          String?
  certifications String[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Booking {
  id          String        @id @default(cuid())
  customerId  String
  technicianId String?
  serviceType ServiceType
  status      BookingStatus @default(PENDING)
  title       String
  description String
  address     String
  city        String
  postalCode  String
  scheduledAt DateTime
  completedAt DateTime?
  totalAmount Float?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  customer   User    @relation(fields: [customerId], references: [id])
  technician User?   @relation("TechnicianBookings", fields: [technicianId], references: [id])
  reviews    Review[]
  payments   Payment[]
}

model Review {
  id        String   @id @default(cuid())
  bookingId String
  userId    String
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([bookingId, userId])
}

model Payment {
  id            String        @id @default(cuid())
  bookingId     String
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  stripePaymentIntentId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  CUSTOMER
  TECHNICIAN
  ADMIN
}

enum ServiceType {
  PLUMBING
  ELECTRICAL
  HVAC
  APPLIANCE_REPAIR
  HANDYMAN
  CLEANING
  PAINTING
  CARPENTRY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}